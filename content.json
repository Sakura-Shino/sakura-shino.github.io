{"meta":{"title":"SHINO’S BLOG","subtitle":null,"description":"SHINO的博客","author":"Shino","url":"https://sakura-shino.github.io","root":"/"},"pages":[{"title":"","date":"2023-10-25T00:33:38.068Z","updated":"2023-10-25T00:33:38.068Z","comments":true,"path":"404.html","permalink":"https://sakura-shino.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2023-10-21T15:04:45.947Z","updated":"2023-10-21T15:04:45.947Z","comments":true,"path":"categories/index.html","permalink":"https://sakura-shino.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2023-10-21T15:09:44.850Z","updated":"2023-10-21T15:09:44.850Z","comments":true,"path":"friends/index.html","permalink":"https://sakura-shino.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2023-10-28T12:56:18.537Z","updated":"2023-10-28T12:56:18.537Z","comments":true,"path":"about/index.html","permalink":"https://sakura-shino.github.io/about/index.html","excerpt":"","text":"问好 嗨，这里是SHINO。初次见面，请多指教！一名普通的大学生（快要研究生啦！！），目前就读于位于上海的浙北理工大学。 姓甚名谁 问其姓氏，是金陵人，客此。 关于我 某位长者曾说过：“一个人的命运啊，当然要靠自我奋斗，但是也要考虑历史的行程” 小学是一名体育特长生，高中成为物理竞赛党，爱好计算机和机器学习，大学却选择了自动化方向。总感觉跨度好大啊… 至于原因当然是我看好自动化行业的发展前景啦~~ 爱好足球、爱好骑行、爱好看番、爱好游戏、爱好一切有意思的事物······ 喜欢二次元，不是二次元！！！ 关于博客 借由某次课程设计的契机搭建了该博客，未来一段时间会把它作为自己的个人网站 会定期更新一些自己的学习笔记、以及一些有意思的东西"},{"title":"所有标签","date":"2023-10-21T15:05:13.037Z","updated":"2023-10-21T15:05:13.037Z","comments":true,"path":"tags/index.html","permalink":"https://sakura-shino.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Win10使用mingw64/VS2019编译安装 Opencv 4.8.0(including Python) with CUDA","slug":"编译安装opencv-4-8-0-with-cuda","date":"2023-10-31T07:55:48.000Z","updated":"2023-11-01T00:20:32.506Z","comments":true,"path":"2023/10/31/编译安装opencv-4-8-0-with-cuda/","link":"","permalink":"https://sakura-shino.github.io/2023/10/31/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85opencv-4-8-0-with-cuda/","excerpt":"没有CUDA怎么跑模型？ 快来手动编译Opencv with CUDA","text":"没有CUDA怎么跑模型？ 快来手动编译Opencv with CUDA 环境准备 OpenCV 4.8.0 支持新版CUDA(CUDA 12.x)了！！！ mingw64 mingw-builds-binaries&#x2F;releases 推荐使用 mingw64_x86_64-11.2.0-release-posix-seh-rt_v9-rev1 版本推荐11.2.0。高版本或低版本都会在编译OpenCV的附加功能时会出现各种问题。8.1.0 8.5.0 11.2.0 13.1.0 版本均已试验，其中11.2.0最为稳定。 posix: 在 Win 下，MinGW 必须是 posix 接口的 thread 库，而不是 Windows native thread 库前车之鉴。参照前车之鉴。 VS2019VS2019下载 CMakeCMake下载: 较新的版本均可。 CUDA: Cuda Toolkit + cudnn OpenCV&gt;=4.8.0 支持 CUDA 12.xOpenCV==4.8.0 在编译CUDA Toolkit 12.x时存在一些函数类型的小问题，需要手动修改源码或下载dev版源码。#23948 推荐一篇清晰全面的好文章 理清GPU、CUDA、CUDA Toolkit、cuDNN关系以及下载安装 Python3.10.x为宜。 NO Anaconda!!!Anaconda中的库会与CMake环境冲突，导致Opencv及其依赖库在编译和链接时存在接口、版本、内容不全等无穷无尽的问题。例如HDF5, protobuf, CUDA Toolkit等。但凡错误信息中出现带有Anaconda/lib字段的路径，都是上述原因。错误形式一般为undefined reference to ...。例如undefined reference to `H5Pset_fapl_mpio&#39;。缺少依赖库请老老实实去一个一个下载。Linux中解决冲突的方法请参阅anaconda 库冲突问题和Linux中usr&#x2F;lib 与 Anaconda环境lib冲突的问题。Windows中方法同理。 如何屏蔽Anaconda 可以通过修改CMakeLists.txt中的find_package语句来解决。例如：SET (ONNXRUNTIME_DIR path/to/onnxruntime) 暂时将Anaconda有关路径移出环境变量，或在Anaconda中移除相关库。 (最优方案)在系统环境变量中设置指定的库路径，且一定要将位置放在Anaconda路径之前。优先级比较：系统环境变量 &gt; 用户环境变量 位置靠前 &gt; 位置靠后 OpenCV + OpenCV-contrib下载OpenCV源码下载OpenCV-contrib源码 依赖库HDF5zlib其余根据需求和缺失情况自行下载。 我的版本CMake 3.27.5 VS2019 mingw64_x86_64-11.2.0-release-posix-seh-rt_v9-rev1 Python 3.10.6 OpenCV 4.8.0-dev OpenCV-contrib 4.8.0 hdf5 1.10.10 eigen 3.4.0 zlib 1.3 编译编译须知 编译前请阅读 MinGW与MVSC编译的库文件无法共用！！！！！！！！！！！！ 编译OpenCV with CUDA时，请使用VScmake/OpencvDetectCUDA.cmake里面第一行就说了 if((WIN32 AND NOT MSVC) OR OPENCV_CMAKE_FORCE_CUDA) message(STATUS &quot;CUDA compilation is disabled (due to only Visual Studio compiler supported on your platform).&quot;) return() endif() 意思就是Win平台下请乖乖使用MSVC编译CUDA 编译选项请按个人需求勾选。使用CUDA时，需要勾选WITH_CUDA和WITH_CUDNN。请注意： 网上有些教程比较老，现版本OpenCV的兼容性有大提升，大部分祖传不能勾选的选项现在可以勾选了。 编译教程 个人体会： 编译中最大难点在环境搭建、依赖库的安装和版本的选择，出了问题排查费神费力。而编译操作按照教程走几乎是傻瓜化操作，没有难度。所以，自己去找教程看。 以下提供一些看过的教程供参考。中文教程：windows+Cmake+MinGW+编译opencv4.5 sources安装过程以及opencv踩坑日记OpenCV4.8 GPU版本CMake编译详细步骤 与CUDA代码演示Windows10编译OpenCV4.8.0+contrib+CUDA使用mingw编译opencv遇到的各种问题Visual Stdio2022+Opencv4.8.0+Opencv-contrib+Cmake3.27.1 英文教程：OpenCV DocsOpenCV Issue trackingBuild OpenCV (including Python) with CUDA on Windows (推荐) C++配置(minw64 + vscode)以下为launch.json和tasks.json供参考 launch.jsontasks.json{ &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { //这个大括号里是我们的‘调试(Debug)’配置 &quot;name&quot;: &quot;Debug&quot;, // 配置名称 Opencv4.8.0 Debug &quot;type&quot;: &quot;cppdbg&quot;, // 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg &quot;request&quot;: &quot;launch&quot;, // 请求配置类型，可以为launch（启动）或attach（附加） // &quot;program&quot;: &quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot;, // 将要进行调试的程序的路径 &quot;program&quot;: &quot;${fileDirname}\\\\bin\\\\${fileBasenameNoExtension}.exe&quot;, // 单文件 &quot;args&quot;: [], // 程序调试时传递给程序的命令行参数，这里设为空即可 &quot;stopAtEntry&quot;: false, // 设为true时程序将暂停在程序入口处，相当于在main上打断点 &quot;cwd&quot;: &quot;${fileDirname}&quot;, // 调试程序时的工作目录，此处为源码文件所在目录 &quot;environment&quot;: [], // 环境变量，这里设为空即可 &quot;externalConsole&quot;: false, // 为true时使用单独的cmd窗口，跳出小黑框；设为false则是用vscode的内置终端，建议用内置终端 &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;, // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，新手调试用不到 &quot;MIMode&quot;: &quot;gdb&quot;, // 指定连接的调试器，gdb是minGW中的调试程序 &quot;miDebuggerPath&quot;: &quot;C:\\\\Program Files\\\\mingw64\\\\bin\\\\gdb.exe&quot;, // 指定调试器所在路径，如果你的minGW装在别的地方，则要改成你自己的路径，注意间隔是\\\\ &quot;setupCommands&quot;: [ { // 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: false } ], &quot;preLaunchTask&quot;: &quot;build&quot; // 调试开始前执行的任务，我们在调试前要编译构建。与tasks.json的label相对应，名字要一样 } ] } { &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;label&quot;: &quot;build&quot;, &quot;type&quot;: &quot;shell&quot;, // &quot;shell&quot; &quot;command&quot;: &quot;g++&quot;, //写c++换成g++, 使用环境变量中默认的g++编译器 &quot;args&quot;: [ &quot;-fdiagnostics-color=always&quot;, // 诊断信息颜色 // &quot;${fileDirname}\\\\*.cpp&quot;, //写c++把 *.c 换成 *.cpp &quot;${file}&quot;, //单文件 &quot;-o&quot;, // &quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot;, &quot;${fileDirname}\\\\bin\\\\${fileBasenameNoExtension}.exe&quot;, //单文件 &quot;-g&quot;, //生成和调试有关的信息 // &quot;-Wall&quot;, // 开启额外警告 &quot;-static-libgcc&quot;, // 静态链接libgcc // &quot;-static-libstdc++&quot;, // 静态链接libstdc++ &quot;-fexec-charset=GBK&quot;, // 生成程序使用编码GBK // &quot;-finput-charset=UTF-8&quot;, // &quot;-finput-charset=GB2312&quot;, // 编译程序使用GB2312字符集 &quot;-std=c++17&quot;, //写c++换成c++标准 default: gnu++14 &quot;-I&quot;, &quot;PATH_TO_BUILD_DIR/include&quot;, &quot;-I&quot;, &quot;PATH_TO_BUILD_DIR/include/opencv2&quot;, &quot;-L&quot;, &quot;PATH_TO_BUILD_DIR/x64/mingw/lib&quot;, &quot;-lopencv_world480&quot;, // &quot;-lopencv_world480d.dll&quot;, // &quot;-Wl,--stack=67108864&quot; //powershell要引号将带符号参数变为整体 ], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true // 不为true时ctrl shift B就要手动选择了 }, &quot;presentation&quot;: { &quot;echo&quot;: true, &quot;reveal&quot;: &quot;always&quot;, // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档 &quot;focus&quot;: false, // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义 &quot;panel&quot;: &quot;shared&quot; // 不同的文件的编译信息共享一个终端面板 }, &quot;problemMatcher&quot;: &quot;$gcc&quot;, &quot;detail&quot;: &quot;生成可执行文件&quot; }, { &quot;label&quot;: &quot;run&quot;, &quot;type&quot;: &quot;shell&quot;, // &quot;shell&quot; &quot;dependsOn&quot;: &quot;build&quot;, // 不使用内置终端 // &quot;command&quot;: &quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot;, &quot;command&quot;: &quot;${fileDirname}\\\\bin\\\\${fileBasenameNoExtension}.exe&quot;, // 单文件 &quot;group&quot;: { &quot;kind&quot;: &quot;test&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;echo&quot;: true, &quot;reveal&quot;: &quot;always&quot;, &quot;focus&quot;: true, &quot;panel&quot;: &quot;shared&quot; // &quot;new&quot; } }, ] } C++配置(VS2019)此处请参考网上教程，经典三个步骤：包含目录、库目录、附加依赖项 Python配置 编译安装 移除之前安装的Opencv-python和Opencv-contrib-python 将PATH_TO_BUILD_DIR\\lib\\python3\\Release\\cv2.cpxx-win_amd64.pyd(cpxx为python版本号)放入PATH_TO_PYTHON_DIST\\Lib\\site-packages\\cv2中 或执行make install命令安装到预设路径或通过VS项目生成INSTALL安装到预设路径 pip安装 移除之前安装的Opencv-python和Opencv-contrib-python pip install opencv-python==4.8.0.74 pip install opencv-contrib-cuda-python==4.8.0.74 Pypi项目链接Pypi: opencv-contrib-cuda-python，截至写作时只有唯一版本4.8.0.74 然后就可以愉快地import cv2了然而。。。你大概率会遇见 最可爱 的错误#19972 ImportError: DLL load failed while importing cv2: The specified module could not be foundImportError: DLL load failed while importing cv2: 找不到指定的模块。 错误原因分析和解决方案：ImportError: DLL load failed while importing cv2: The specified module could not be found.解决问题的尝试过程和心路历程：ImportError: DLL load failed while importing cv2: The specified module could not be found。下面是这老哥解决问题后的回复，&#39;a good and painful learning experience&#39;，哈哈哈哈哈哈哈哈哈，我debug完也是这个心情。 Debug核心思路：找缺失的dll（和报错的字面意思一样） 检查PATH_TO_PYTHON_DIST\\Lib\\site-packages\\cv2文件是否完整，自己pip install opencv-python对照一下。文件一般都是完整的，但是看一下，免得是低级错误。 下载process monitor，用于查看python.exe的相关事件，找到缺失的dll。 按下图配置事件过滤器 重启python，查看python.exe相关事件，找到缺失的dll。 修复缺失dll的几种方法 复制到系统路径下，例如C:\\Windows\\System32 添加到环境变量，例如PATH_TO_HDF5\\bin (推荐) 打开PATH_TO_PYTHON_DIST\\Lib\\site-packages\\cv2\\config.py，写入 import os BINARIES_PATHS = [ &#39;PATH_TO_HDF5\\bin&#39;, ... # 其他缺失的dll路径 ] + BINARIES_PATHS (推荐) 测试Python 测试CUDA是否可用 import cv2 device_count = cv2.cuda.getCudaEnabledDeviceCount(); if (device_count == 0): print(&quot;Error: no CUDA devices found!&quot;) else: print(f&quot;Found &#123;device_count&#125; CUDA devices:&quot;) for i in range(device_count): cv2.cuda.printCudaDeviceInfo(i) 输出 Found 1 CUDA devices: *** CUDA Device Query (Runtime API) version (CUDART static linking) *** Device count: 1 Device 0: &quot;NVIDIA GeForce GTX 1650&quot; CUDA Driver Version / Runtime Version 12.20 / 12.20 CUDA Capability Major/Minor version number: 7.5 Total amount of global memory: 4096 MBytes (4294639616 bytes) GPU Clock Speed: 1.51 GHz Max Texture Dimension Size (x,y,z) 1D=(131072), 2D=(131072,65536), 3D=(16384,16384,16384) Max Layered Texture Size (dim) x layers 1D=(32768) x 2048, 2D=(32768,32768) x 2048 Total amount of constant memory: 65536 bytes Total amount of shared memory per block: 49152 bytes Total number of registers available per block: 65536 Warp size: 32 Maximum number of threads per block: 1024 Maximum sizes of each dimension of a block: 1024 x 1024 x 64 Maximum sizes of each dimension of a grid: 2147483647 x 65535 x 65535 Maximum memory pitch: 2147483647 bytes Texture alignment: 512 bytes Concurrent copy and execution: Yes with 6 copy engine(s) Run time limit on kernels: Yes Integrated GPU sharing Host Memory: No Support host page-locked memory mapping: Yes Concurrent kernel execution: Yes Alignment requirement for Surfaces: Yes Device has ECC support enabled: No Device is using TCC driver mode: No Device supports Unified Addressing (UVA): Yes Device PCI Bus ID / PCI location ID: 1 / 0 Compute Mode: Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 12.20, CUDA Runtime Version = 12.20, NumDevs = 1 比较CPU和GPU的性能 import numpy as np import cv2 as cv import time import timeit rand = np.random.random((1024, 1024)).astype(np.float32) h_array1 = np.stack([rand, rand],axis=2) h_array2 = h_array1 d_array1 = cv.cuda_GpuMat() d_array2 = cv.cuda_GpuMat() d_array1.upload(h_array1) d_array2.upload(h_array2) # start = time.time() # cv.cuda.gemm(d_array1, d_array2, 1, None, 0, None, 1) # end = time.time() # print(&quot;Time elapsed:&quot;, end - start, &quot;sec&quot;) def gpu_test(): cv.cuda.gemm(d_array1, d_array2, 1, None, 0, None, 1) def cpu_test(): cv.gemm(h_array1, h_array2, 1, None, 0, None, 1) N = 10 gpu_time = timeit.timeit(gpu_test, number=N) cpu_time = timeit.timeit(cpu_test, number=N) print(f&quot;GPU time: &#123;gpu_time/N*1000:.2f&#125; ms&quot;) print(f&quot;CPU time: &#123;cpu_time/N*1000:.2f&#125; ms&quot;) print(f&quot;Speedup: &#123;cpu_time/gpu_time:.2f&#125;x&quot;) 矩阵运算时间比较：GPU加速6倍左右 GPU time: 206.40 ms CPU time: 1258.00 ms Speedup: 6.09x C++ 测试CUDA是否可用C++代码与Python相似，请自行转写。 YOLOv5测试源码：yolov5-opencv-cpp-python源码跑在Linux平台上，编译命令为 g++ -O3 cpp/yolo.cpp -o yolo_example `pkg-config --cflags --libs opencv4` 自己修改的适用于Windows平台的编译命令 cl.exe .\\cpp\\yolo.cpp /EHsc /O2 /MT /favor:AMD64 /I&quot;PATH_TO_BUILD_DIR/include&quot; /I&quot;PATH_TO_BUILD_DIR/include/opencv2&quot; /link &quot;PATH_TO_BUILD_DIR/x64/vc16/lib/opencv_world480.lib&quot; /out:yolo_example.exe 运行效果 结语 那么，祝贺你！！！你已经成功编译安装了Opencv with CUDA，以后可以愉快地跑模型了。","categories":[{"name":"教程","slug":"教程","permalink":"https://sakura-shino.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"opencv","slug":"opencv","permalink":"https://sakura-shino.github.io/tags/opencv/"},{"name":"cuda","slug":"cuda","permalink":"https://sakura-shino.github.io/tags/cuda/"},{"name":"python","slug":"python","permalink":"https://sakura-shino.github.io/tags/python/"},{"name":"cpp","slug":"cpp","permalink":"https://sakura-shino.github.io/tags/cpp/"}]},{"title":"从零使用Hexo框架搭建个人博客小记","slug":"从0搭建博客","date":"2023-10-26T14:34:19.237Z","updated":"2023-10-31T13:03:13.767Z","comments":true,"path":"2023/10/26/从0搭建博客/","link":"","permalink":"https://sakura-shino.github.io/2023/10/26/%E4%BB%8E0%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"拥有个人博客真的是一件很酷的事呢！ 这篇博客面向非科班、有相关知识、但不会建站的小白（说的大概是我了）。配置过程会以概要的方式梳理一遍，提点一下每个步骤的思路。 前言平台: Windows 博客采用Hexo框架搭建，搭建过程理论上可以完全参照Hexo中文文档进行配置。 Hexo框架需要额外配置主题才能有好看的界面，我博客的主题是Volantis，理论上可以完全参照Volantis中文文档进行配置。 具体过程还可以参照知乎帖子从零开始搭建个人博客（超详细），或者自行B站、百度。 我基本全称跟着文档操作，几乎没有遇到坑 环境准备 安装git: Git - 安装 Git 安装Nodejs: Node.js 此处可以修改一下npm的全局安装路径和缓存路径 npm config set prefix &quot;D:\\nodejs\\node_global&quot; npm config set cache &quot;D:\\nodejs\\node_cache&quot; 安装Hexo: npm install -g hexo-cli -g表示全局安装，即安装在上一步设置的node_global文件夹中 建站运行以下命令，在文件夹中间建立站点 $ hexo init &lt;folder&gt; $ cd &lt;folder&gt; $ npm install 运行成功后，会生成如下目录 . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes 此处需要注意的是: /source为存放资源的根目录。例如网页中的资源路径/img/test.png相当于/source/img/test.png。 修改配置请参照官方文档修改_config.yml 如果使用主题，这一步可以省略，主题的配置文件会覆盖这里的配置。 测试运行hexo g生成静态网页，运行hexo s启动本地服务器 输出如下 $ hexo s INFO Validating config INFO ============================================================ Volantis 5.8.0 Docs: https://volantis.js.org/ Repo: https://github.com/volantis-x/hexo-theme-volantis/ ============================================================ INFO Start processing INFO Checking environment configuration... INFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. INFO Check environment configuration success! http://localhost:4000/为本地服务器地址 安装主题主题配置难度不高，但阅读文档的过程很漫长。想要拥有个性化的博客，这一步不可或缺。请认真阅读每个主题的官方文档并进行配置。主题的配置文件通常命名为_config.&lt;theme name&gt;.yml，例如Volantis主题的配置文件为_config.volantis.yml 值得注意的是：使用到的图片等素材选用图床还是本地图片，请根据需求自行斟酌。 Volantis主题该主题里里外外均可自定义，请参照Volantis中文文档修改_config.volantis.yml中的配置。 部署 注册Github账号 配置ssh 建立名为username.github.io的仓库，其中username替换为账户名称 在_config.yml中找到如下片段（若没有，请自行添加），并根据自己的仓库信息修改 deploy: type: git repository: git@github.com:username/username.github.io.git #你的仓库地址 branch: main 运行hexo d将本地网站部署到GitHub上 访问username.github.io就能看到你的博客啦！ 发布文章将新写的博文如test.md放入/source/_post，使用hexo p &amp; hexo d即可发布 Hexo-Github发布流程图 结语至此，我们获得一个属于自己的博客网站。","categories":[{"name":"教程","slug":"教程","permalink":"https://sakura-shino.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://sakura-shino.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://sakura-shino.github.io/tags/hexo/"}]},{"title":"demo02","slug":"demo02","date":"2023-10-21T14:04:37.175Z","updated":"2023-10-27T05:55:58.251Z","comments":true,"path":"2023/10/21/demo02/","link":"","permalink":"https://sakura-shino.github.io/2023/10/21/demo02/","excerpt":"此处为摘要，这是测试样例2。上面的图片为headimg⬆","text":"此处为摘要，这是测试样例2。上面的图片为headimg⬆ 标签显示测试 标题（可选）Windows 10不是為所有人設計,而是為每個人設計嵌套测试： 请坐和放宽，我正在帮你搞定一切… Folding 测试： 点击查看更多 不要说我们没有警告过你我们都有不顺利的时候","categories":[{"name":"测试","slug":"测试","permalink":"https://sakura-shino.github.io/categories/%E6%B5%8B%E8%AF%95/"},{"name":"小类2","slug":"测试/小类2","permalink":"https://sakura-shino.github.io/categories/%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%B1%BB2/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://sakura-shino.github.io/tags/demo/"},{"name":"test","slug":"test","permalink":"https://sakura-shino.github.io/tags/test/"}]},{"title":"demo01","slug":"demo01","date":"2023-10-21T14:04:26.455Z","updated":"2023-10-26T13:21:45.303Z","comments":true,"path":"2023/10/21/demo01/","link":"","permalink":"https://sakura-shino.github.io/2023/10/21/demo01/","excerpt":"","text":"demo01 测试图片路径能否被正确识别 这是引用的话 这句话高亮","categories":[{"name":"测试","slug":"测试","permalink":"https://sakura-shino.github.io/categories/%E6%B5%8B%E8%AF%95/"},{"name":"小类1","slug":"测试/小类1","permalink":"https://sakura-shino.github.io/categories/%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%B1%BB1/"}],"tags":[{"name":"demo","slug":"demo","permalink":"https://sakura-shino.github.io/tags/demo/"},{"name":"test","slug":"test","permalink":"https://sakura-shino.github.io/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2023-10-21T09:10:54.848Z","updated":"2023-10-26T14:45:08.459Z","comments":true,"path":"2023/10/21/hello-world/","link":"","permalink":"https://sakura-shino.github.io/2023/10/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://sakura-shino.github.io/tags/test/"},{"name":"hello world","slug":"hello-world","permalink":"https://sakura-shino.github.io/tags/hello-world/"}]}],"categories":[{"name":"教程","slug":"教程","permalink":"https://sakura-shino.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"测试","slug":"测试","permalink":"https://sakura-shino.github.io/categories/%E6%B5%8B%E8%AF%95/"},{"name":"小类2","slug":"测试/小类2","permalink":"https://sakura-shino.github.io/categories/%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%B1%BB2/"},{"name":"小类1","slug":"测试/小类1","permalink":"https://sakura-shino.github.io/categories/%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%B1%BB1/"}],"tags":[{"name":"opencv","slug":"opencv","permalink":"https://sakura-shino.github.io/tags/opencv/"},{"name":"cuda","slug":"cuda","permalink":"https://sakura-shino.github.io/tags/cuda/"},{"name":"python","slug":"python","permalink":"https://sakura-shino.github.io/tags/python/"},{"name":"cpp","slug":"cpp","permalink":"https://sakura-shino.github.io/tags/cpp/"},{"name":"blog","slug":"blog","permalink":"https://sakura-shino.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://sakura-shino.github.io/tags/hexo/"},{"name":"demo","slug":"demo","permalink":"https://sakura-shino.github.io/tags/demo/"},{"name":"test","slug":"test","permalink":"https://sakura-shino.github.io/tags/test/"},{"name":"hello world","slug":"hello-world","permalink":"https://sakura-shino.github.io/tags/hello-world/"}]}